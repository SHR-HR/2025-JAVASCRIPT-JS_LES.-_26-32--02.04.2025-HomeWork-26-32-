// ========================
// üìÑ JS-—Ñ–∞–π–ª —Å–æ —Å–Ω–∏–ø–ø–µ—Ç–∞–º–∏
// ========================

// 1. –ë–∞–∑–æ–≤—ã–π fetch —Å async/await –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function fetchData() {
    try {
      const response = await fetch('https://example.com/api');
      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }
      const data = await response.json();
      console.log(data);
    } catch (error) {
      console.error('Fetch error:', error);
    }
  }
  
  fetchData();
  
  // 2. –ó–∞–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–∏—Å
  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
  
  async function waitAndSay() {
    await delay(2000);
    console.log("‚è≥ –ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã!");
  }
  
  waitAndSay();
  
  // 3. Promise.all
  const p1 = Promise.resolve("–ü–µ—Ä–≤—ã–π");
  const p2 = Promise.resolve("–í—Ç–æ—Ä–æ–π");
  
  Promise.all([p1, p2])
    .then(results => console.log("‚úÖ –í—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã:", results))
    .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞:", err));
  
  // 4. Promise.allSettled
  Promise.allSettled([
    Promise.resolve("‚úÖ –£—Å–ø–µ—Ö"),
    Promise.reject("‚ùå –ù–µ—É–¥–∞—á–∞")
  ]).then(results => console.log("üü° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", results));
  
  // 5. Promise.race
  const fast = new Promise(resolve => setTimeout(() => resolve("–ë—ã—Å—Ç—Ä—ã–π!"), 500));
  const slow = new Promise(resolve => setTimeout(() => resolve("–ú–µ–¥–ª–µ–Ω–Ω—ã–π!"), 1500));
  
  Promise.race([fast, slow])
    .then(result => console.log("üèÅ –ü–æ–±–µ–¥–∏–ª:", result));
  
  // 6. Promise.any (—Ç–æ–ª—å–∫–æ –≤ ES2021+)
  Promise.any([
    Promise.reject("–û—à–∏–±–∫–∞"),
    Promise.resolve("–£—Ä–∞! –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö!")
  ])
  .then(result => console.log("‚ú® –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π:", result))
  .catch(err => console.error("–í—Å–µ —É–ø–∞–ª–∏:", err));
  
  // 7. Async-—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å
  async function greet() {
    return "Hello from async!";
  }
  
  greet().then(console.log);

  


  