// // –ü—Ä–æ–º–∏—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
// let promise = new Promise((resolve, reject) => {
//     setTimeout(() => {
//       let data = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
//       resolve(data);
//     }, 2000);
//   });
  
//   promise
//     .then(data => {
//       console.log("–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–∏—Å:", data);
//     })
//     .catch(error => {
//       console.error("–û—à–∏–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞:", error);
//     })
//     .finally(() => {
//       console.log("–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à—ë–Ω");
//     });
  
//   // –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
//   const delay = ms => new Promise(resolve => setTimeout(() => resolve(`–ñ–¥–∞–ª ${ms} –º—Å`), ms));
  
//   // –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await
//   async function fetchAsyncTodos() {
//     await delay(2000);
//     console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ async/await");
//   }
  
//   fetchAsyncTodos();
  
//   // ===== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–∏—Å-–º–µ—Ç–æ–¥–æ–≤ =====
  
//   const p1 = delay(1000); // –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫
//   const p2 = delay(2000); // –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫
//   const p3 = new Promise((_, reject) => setTimeout(() => reject("–û—à–∏–±–∫–∞ –≤ p3"), 1500));
  
//   // 1. Promise.all ‚Äî –≤—Å–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
//   Promise.all([p1, p2])
//     .then(results => console.log("‚úÖ Promise.all:", results))
//     .catch(err => console.error("‚ùå Promise.all –æ—à–∏–±–∫–∞:", err));
  
//   // 2. Promise.allSettled ‚Äî –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//   Promise.allSettled([p1, p2, p3])
//     .then(results => console.log("üü° Promise.allSettled:", results));
  
//   // 3. Promise.race ‚Äî –∫—Ç–æ –ø–µ—Ä–≤—ã–π, —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏–ª
//   Promise.race([p1, p2, p3])
//     .then(result => console.log("üèÅ Promise.race:", result))
//     .catch(error => console.error("üèÅ Promise.race –æ—à–∏–±–∫–∞:", error));
  
//   // 4. Promise.any ‚Äî –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π
//   Promise.any([p3, p2, p1]) // p3 —É–ø–∞–¥—ë—Ç, –Ω–æ any –∂–¥—ë—Ç —É—Å–ø–µ—à–Ω—ã–π p2 –∏–ª–∏ p1
//     .then(result => console.log("‚ú® Promise.any:", result))
//     .catch(error => console.error("‚ùå Promise.any –æ—à–∏–±–∫–∞:", error));
  




    // async function fetchData() {
    //     try {
    //       const response = await fetch('https://dummyjson.com/posts');
      
    //       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    //       if (!response.ok) {
    //         throw new Error(`Error: ${response.status}`);
    //       }
      
    //       // –ü–∞—Ä—Å–∏–º JSON
    //       const data = await response.json();
    //       console.log(data);
      
    //     } catch (e) {
    //       // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    //       console.error(e);
    //     }
    //   }
      
    //   fetchData();
      




// üì¶ –°–Ω–∏–ø–ø–µ—Ç—ã JavaScript ‚Äî –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å, Fetch, –ü—Ä–æ–º–∏—Å—ã

// üîπ 1. –ë–∞–∑–æ–≤—ã–π fetch + async/await + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

async function fetchData() {
    try {
      const response = await fetch('https://example.com/api');
  
      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }
  
      const data = await response.json();
      console.log(data);
    } catch (error) {
      console.error('Fetch error:', error);
    }
  }
  
  fetchData();

  

// üîπ 2. –§—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–º–∏—Å–æ–º –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π (delay)

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function waitAndSay() {
  await delay(2000);
  console.log("‚è≥ –ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã!");
}

waitAndSay();



// üîπ 3. Promise.all

const p1 = Promise.resolve("–ü–µ—Ä–≤—ã–π");
const p2 = Promise.resolve("–í—Ç–æ—Ä–æ–π");

Promise.all([p1, p2])
  .then(results => console.log("‚úÖ –í—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã:", results))
  .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞:", err));



// üîπ 4. Promise.allSettled

Promise.allSettled([
    Promise.resolve("‚úÖ –£—Å–ø–µ—Ö"),
    Promise.reject("‚ùå –ù–µ—É–¥–∞—á–∞")
  ]).then(results => console.log("üü° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", results));

  

// üîπ 5. Promise.race

const fast = new Promise(resolve => setTimeout(() => resolve("–ë—ã—Å—Ç—Ä—ã–π!"), 500));
const slow = new Promise(resolve => setTimeout(() => resolve("–ú–µ–¥–ª–µ–Ω–Ω—ã–π!"), 1500));

Promise.race([fast, slow])
  .then(result => console.log("üèÅ –ü–æ–±–µ–¥–∏–ª:", result));



//  üîπ 6. Promise.any (ES2021+)

Promise.any([
    Promise.reject("–û—à–∏–±–∫–∞"),
    Promise.resolve("–£—Ä–∞! –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö!")
  ])
  .then(result => console.log("‚ú® –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π:", result))
  .catch(err => console.error("–í—Å–µ —É–ø–∞–ª–∏:", err));

  


// üîπ 7. Async-—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å (–≤–Ω—É—Ç—Ä–∏ return)

async function greet() {
    return "Hello from async!";
  }
  
  greet().then(console.log);

  








